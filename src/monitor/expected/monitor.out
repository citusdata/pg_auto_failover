-- Copyright (c) Microsoft Corporation. All rights reserved.
-- Licensed under the PostgreSQL License.
\x on
select *
  from pgautofailover.register_node('default', 'localhost', 9876, 'postgres');
-[ RECORD 1 ]---------------+-------
assigned_node_id            | 1
assigned_group_id           | 0
assigned_group_state        | single
assigned_candidate_priority | 100
assigned_replication_quorum | t

select *
  from pgautofailover.register_node('default', 'localhost', 9877, 'postgres');
ERROR:  primary node is still initializing
HINT:  Retry registering in a moment
select *
  from pgautofailover.node_active('default', 'localhost', 9876,
                                  current_group_role => 'single');
-[ RECORD 1 ]---------------+-------
assigned_node_id            | 1
assigned_group_id           | 0
assigned_group_state        | single
assigned_candidate_priority | 100
assigned_replication_quorum | t

select *
  from pgautofailover.register_node('default', 'localhost', 9877, 'postgres');
-[ RECORD 1 ]---------------+-------------
assigned_node_id            | 2
assigned_group_id           | 0
assigned_group_state        | wait_standby
assigned_candidate_priority | 100
assigned_replication_quorum | t

table pgautofailover.formation;
-[ RECORD 1 ]--------+---------
formationid          | default
kind                 | pgsql
dbname               | postgres
opt_secondary        | t
number_sync_standbys | 1

-- dump the pgautofailover.node table, omitting the timely columns
select formationid, nodeid, groupid, nodehost, nodeport,
       goalstate, reportedstate, reportedpgisrunning, reportedrepstate
  from pgautofailover.node;
-[ RECORD 1 ]-------+-------------
formationid         | default
nodeid              | 1
groupid             | 0
nodehost            | localhost
nodeport            | 9876
goalstate           | single
reportedstate       | single
reportedpgisrunning | t
reportedrepstate    | unknown
-[ RECORD 2 ]-------+-------------
formationid         | default
nodeid              | 2
groupid             | 0
nodehost            | localhost
nodeport            | 9877
goalstate           | wait_standby
reportedstate       | init
reportedpgisrunning | t
reportedrepstate    | async

select * from pgautofailover.get_primary('unknown formation');
ERROR:  group has no writable node right now
select * from pgautofailover.get_primary(group_id => -10);
ERROR:  group has no writable node right now
select * from pgautofailover.get_primary();
-[ RECORD 1 ]---+----------
primary_node_id | 1
primary_name    | localhost
primary_port    | 9876

select * from pgautofailover.get_primary('default', 0);
-[ RECORD 1 ]---+----------
primary_node_id | 1
primary_name    | localhost
primary_port    | 9876

select * from pgautofailover.get_other_nodes('localhost', 9876);
-[ RECORD 1 ]---+----------
node_id         | 2
node_name       | localhost
node_port       | 9877
node_lsn        | 0/0
node_is_primary | f

select pgautofailover.remove_node('localhost', 9876);
-[ RECORD 1 ]--
remove_node | t

table pgautofailover.formation;
-[ RECORD 1 ]--------+---------
formationid          | default
kind                 | pgsql
dbname               | postgres
opt_secondary        | t
number_sync_standbys | 1

-- dump the pgautofailover.node table, omitting the timely columns
select formationid, nodeid, groupid, nodehost, nodeport,
       goalstate, reportedstate, reportedpgisrunning, reportedrepstate
  from pgautofailover.node;
-[ RECORD 1 ]-------+----------
formationid         | default
nodeid              | 2
groupid             | 0
nodehost            | localhost
nodeport            | 9877
goalstate           | single
reportedstate       | init
reportedpgisrunning | t
reportedrepstate    | async

select * from pgautofailover.node_active('default', 'localhost', 9877);
-[ RECORD 1 ]---------------+-------
assigned_node_id            | 2
assigned_group_id           | 0
assigned_group_state        | single
assigned_candidate_priority | 100
assigned_replication_quorum | t

-- should fail as there's no primary at this point
select pgautofailover.perform_failover();
ERROR:  cannot fail over: group does not have 2 nodes
